#include "Exploits.hpp"
#include "../Settings.hpp"
#include "../Tools/Tools.hpp"
#include "../RageBot/RageBot.hpp"
#include "../Packet/PacketManager.hpp"
#include "../Prediction/EnginePrediction.hpp"
#include "../Movement/AutoPeek.hpp"
#include "../Animations/LocalAnimations.hpp"
#include "../Networking/Networking.hpp"
#include "../SDK/Math/Math.hpp"

void C_ExploitSystem::Instance( )
{
	if ( !m_Data.m_Selected || !g_PacketManager->GetModifablePacket( ) )
		return;

	if ( !g_Globals.m_LocalPlayer->m_hActiveWeapon( ).Get( ) || !g_Globals.m_LocalPlayer->m_hActiveWeapon( ).Get( )->CanShift( ) )
		return;

	if ( !( g_PacketManager->GetModifableCommand( )->m_nButtons & IN_ATTACK ) || !g_Globals.m_LocalPlayer->CanFire( m_Data.m_NextShift, false ) )
		return;

	if ( m_Data.m_ShiftTick )
	{
		m_Data.m_ShiftTick = TIME_TO_TICKS( g_Globals.m_Interfaces.m_GlobalVars->m_flRealTime + g_Settings->m_flRechargeTime );
		return;
	}

	if ( m_Data.m_Selected == DOUBLETAP )
	{
		m_Data.m_ShiftAmount = m_Data.m_NextShift;
		m_Data.m_ShiftMode = SHIFT_MOVE;

		return;
	}

	m_Data.m_ShiftAmount = m_Data.m_NextShift;
	m_Data.m_ShiftedTickbase = m_Data.m_NextShift;
	m_Data.m_ShiftCommand = g_PacketManager->GetModifableCommand( )->m_nCommand;
	m_Data.m_ShiftMode = SHIFT_BUFFER;
}

void C_ExploitSystem::BreakLagCompensation( )
{
	if ( m_Data.m_Selected != DOUBLETAP || !g_PacketManager->GetModifablePacket( ) || m_Data.m_ShiftTick )
		return;

	if ( g_PacketManager->GetModifableCommand( )->m_nButtons & IN_ATTACK && g_Globals.m_LocalPlayer->CanFire( m_Data.m_NextShift, false ) && g_Globals.m_LocalPlayer->m_hActiveWeapon( ).Get( )->CanShift( ) )
		return;

	if ( !g_Globals.m_LocalPlayer->m_hActiveWeapon( ).Get( ) )
		return;

	if ( g_Globals.m_Peek.m_bIsPeeking )
	{
		if ( !m_Data.m_PreviousPeek )
		{
			m_Data.m_ShiftCommand = g_PacketManager->GetModifableCommand( )->m_nCommand;
			m_Data.m_ShiftedTickbase = 16;

			m_Data.m_PreviousPeek = g_Globals.m_Peek.m_bIsPeeking;
			return;
		}
		else
		{
			if ( !m_Data.m_Once )
			{
				m_Data.m_ShiftedTickbase = -16;
				m_Data.m_ShiftCommand = g_PacketManager->GetModifableCommand( )->m_nCommand;
				m_Data.m_Once = true;
			}
		}
	}
	else
	{
		if ( m_Data.m_PreviousPeek )
		{
			if ( !m_Data.m_Once )
			{
				m_Data.m_ShiftedTickbase = -16;
				m_Data.m_ShiftCommand = g_PacketManager->GetModifableCommand( )->m_nCommand;
				m_Data.m_Once = true;
			}
			else
				m_Data.m_Once = false;
		}
	}

	m_Data.m_PreviousPeek = g_Globals.m_Peek.m_bIsPeeking;
}

void C_ExploitSystem::SetupCommand( )
{
	g_Globals.m_AccuracyData.m_bRestoreAutoStop = true;
	if ( !g_Globals.m_LocalPlayer || !g_Globals.m_LocalPlayer->IsAlive( ) )
	{
		m_Data.m_Selected = 0;
		m_Data.m_TicksAllowedForProcessing = 0;
		
		g_Globals.m_Packet.m_MaxChoke = 14;
		return;
	}

	if ( ( g_Globals.m_LocalPlayer->m_fFlags( ) & FL_FROZEN ) || ( *g_Globals.m_Interfaces.m_GameRules )->IsFreezePeriod( ) )
	{
		m_Data.m_Selected = 0;
		m_Data.m_TicksAllowedForProcessing = 0;
		
		g_Globals.m_Packet.m_MaxChoke = 14;
		return;
	}
	
	C_BaseCombatWeapon* pCombatWeapon = g_Globals.m_LocalPlayer->m_hActiveWeapon( ).Get( );
	if ( !pCombatWeapon )		
		return;

	if ( g_Globals.m_Packet.m_bFakeDuck )
	{
		m_Data.m_Selected = 0;
		m_Data.m_TicksAllowedForProcessing = 0;

		g_Globals.m_Packet.m_MaxChoke = 14;
		return;
	}

	bool bIsDTActive = g_Tools->IsBindActive( g_Settings->m_aDoubleTap );
	bool bIsHSActive = g_Tools->IsBindActive( g_Settings->m_aHideShots );

	int nOldSelected = m_Data.m_Selected;
	if ( bIsDTActive )
		m_Data.m_Selected = DOUBLETAP;
	else if ( bIsHSActive )
		m_Data.m_Selected = HIDESHOTS;
	else
		m_Data.m_Selected = 0;

	if ( m_Data.m_Selected != nOldSelected )
	{
		if ( !m_Data.m_Selected )
		{
			m_Data.m_ShiftAmount = m_Data.m_TicksAllowedForProcessing;
			m_Data.m_ShiftedTickbase = m_Data.m_ShiftAmount;
			m_Data.m_ShiftCommand = g_PacketManager->GetModifableCommand( )->m_nCommand;
			m_Data.m_ShiftMode = SHIFT_MOVE;
			m_Data.m_Reset = true;
		}
	}

	switch ( m_Data.m_Selected )
	{
		case DOUBLETAP: m_Data.m_NextShift = 15; break;
		case HIDESHOTS: m_Data.m_NextShift = 9; break;
		case NULL: m_Data.m_NextShift = NULL; break;
	}

	if ( m_Data.m_ShiftTick || !pCombatWeapon->CanShift( ) )
		m_Data.m_NextShift = 0;

	g_Globals.m_Packet.m_MaxChoke = 13;
	if ( m_Data.m_Selected )
	{
		int nTicksSinceShift = g_Networking->GetServerTick( ) - m_Data.m_ShiftTick;
		if ( nTicksSinceShift < TIME_TO_TICKS( 0.65f ) )
		{
			if ( nTicksSinceShift < 5 )
				g_Globals.m_Packet.m_MaxChoke = 1;
		}
		else
			g_Globals.m_Packet.m_MaxChoke = 1;
	}
}

bool C_ExploitSystem::IsFinalTick( )
{
	if ( !g_Globals.m_Interfaces.m_EngineClient->IsInGame( ) || !g_Globals.m_Interfaces.m_EngineClient->IsConnected( ) )
		return true;

	if ( !g_Globals.m_LocalPlayer || !g_Globals.m_LocalPlayer->IsAlive( ) )
		return true;

	if ( !m_Data.m_Selected || !m_Data.m_ShiftAmount )
		return true;

	return false;
}

int32_t C_ExploitSystem::GetNetworkTickbase( int32_t nCommand )
{
	int nTickbase = g_Globals.m_LocalPlayer->m_nTickBase( );
	if ( m_Data.m_Selected == DOUBLETAP )
	{
		if ( nCommand == m_Data.m_ShiftCommand )
			nTickbase += m_Data.m_ShiftedTickbase;
		
		return nTickbase;
	}

	if ( m_Data.m_Reset )
	{
		if ( nCommand == m_Data.m_ShiftCommand )
			nTickbase -= m_Data.m_ShiftedTickbase;

		m_Data.m_Reset = false;
		m_Data.m_ShiftCommand = 0;

		return nTickbase;
	}

	if ( nCommand == m_Data.m_ShiftCommand )
		nTickbase -= m_Data.m_ShiftedTickbase;
	else if ( nCommand == m_Data.m_ShiftCommand + 1 )
		nTickbase += m_Data.m_ShiftedTickbase;

	return nTickbase;
}

bool C_ExploitSystem::PerformCommand( )
{
	m_Data.m_TicksToStop = 0;
	if ( m_Data.m_ShiftTick || !m_Data.m_ShiftingTickbase || m_Data.m_ShiftMode != MODE::SHIFT_MOVE )
		return true;

	C_BaseCombatWeapon* pCombatWeapon = g_Globals.m_LocalPlayer->m_hActiveWeapon( ).Get( );
	if ( !pCombatWeapon )
		return false;

	C_CSWeaponData* pWeaponData = pCombatWeapon->GetWeaponData( );
	if ( !pWeaponData )
		return false;

	int32_t iCurrentWeapon = -1;
	switch ( pCombatWeapon->m_iItemDefinitionIndex( ) )
	{
		case WEAPON_AK47:
		case WEAPON_M4A1:
		case WEAPON_M4A1_SILENCER:
		case WEAPON_FAMAS:
		case WEAPON_SG553:
		case WEAPON_GALILAR:
			iCurrentWeapon = RAGE_WEAPON::RIFLE; break;
		case WEAPON_MAG7:
		case WEAPON_NOVA:
		case WEAPON_XM1014:
		case WEAPON_SAWEDOFF:
			iCurrentWeapon = RAGE_WEAPON::SHOTGUN; break;
		case WEAPON_MP7:
		case WEAPON_MP9:
		case WEAPON_P90:
		case WEAPON_M249:
		case WEAPON_NEGEV:
		case WEAPON_UMP45:
			iCurrentWeapon = RAGE_WEAPON::SMG; break;
		case WEAPON_SCAR20:
		case WEAPON_G3SG1:
			iCurrentWeapon = RAGE_WEAPON::AUTO; break;
		case WEAPON_GLOCK:
		case WEAPON_HKP2000: 
		case WEAPON_USP_SILENCER:
		case WEAPON_CZ75A:
		case WEAPON_TEC9:
		case WEAPON_ELITE:
		case WEAPON_FIVESEVEN:
		case WEAPON_P250:
			iCurrentWeapon = RAGE_WEAPON::PISTOL; break;
		case WEAPON_SSG08:
			iCurrentWeapon = RAGE_WEAPON::SCOUT; break;
		case WEAPON_AWP:
			iCurrentWeapon = RAGE_WEAPON::AWP; break;
		case WEAPON_DEAGLE:
			iCurrentWeapon = RAGE_WEAPON::DEAGLE; break;
		case WEAPON_REVOLVER:
			iCurrentWeapon = RAGE_WEAPON::REVOLVER; break;
		default: iCurrentWeapon = -1;
	}

	if ( iCurrentWeapon < 0 )
		return false;

	float_t flMaxSpeed = g_Globals.m_LocalPlayer->GetMaxPlayerSpeed( );
	if ( g_Globals.m_LocalPlayer->m_vecVelocity( ).Length2D( ) )
	{
		float_t flSideMove = g_PacketManager->GetModifableCommand( )->m_flSideMove;
		float_t flForwardMove = g_PacketManager->GetModifableCommand( )->m_flForwardMove;

		g_PredictionSystem->RestoreNetvars( g_PacketManager->GetModifableCommand( )->m_nCommand );

		float_t flMaxSpeed = g_Globals.m_LocalPlayer->GetMaxPlayerSpeed( );
		for ( ;m_Data.m_TicksToStop <= 6; m_Data.m_TicksToStop++ )
		{ 
			g_RageBot->AutoStop( );
	
			g_Globals.m_Interfaces.m_Prediction->SetupMove( g_Globals.m_LocalPlayer, g_PacketManager->GetModifableCommand( ), g_Globals.m_Interfaces.m_MoveHelper, &m_MoveData );
			g_Globals.m_Interfaces.m_GameMovement->ProcessMovement( g_Globals.m_LocalPlayer, &m_MoveData );
			g_Globals.m_Interfaces.m_Prediction->FinishMove( g_Globals.m_LocalPlayer, g_PacketManager->GetModifableCommand( ), &m_MoveData );

			if ( g_Globals.m_LocalPlayer->m_vecVelocity( ).Length2D( ) < flMaxSpeed * 0.34f )
				break;
		}

		g_PacketManager->GetModifableCommand( )->m_flSideMove = flSideMove;
		g_PacketManager->GetModifableCommand( )->m_flForwardMove = flForwardMove;

		g_PredictionSystem->RestoreNetvars( g_PacketManager->GetModifableCommand( )->m_nCommand );
	}
	
	g_PacketManager->GetModifableCommand( )->m_nButtons &= ~( IN_ATTACK | IN_ATTACK2 );
	if ( m_Data.m_RemainToShift <= m_Data.m_TicksToStop && g_Settings->m_aRageSettings[ iCurrentWeapon ].m_DoubleTapOptions[ 1 ] )
		g_RageBot->AutoStop( );
	else if ( g_Settings->m_aRageSettings[ iCurrentWeapon ].m_DoubleTapOptions[ 0 ] )
	{
		if ( g_PacketManager->GetModifableCommand( )->m_flSideMove > 5.0f )
			g_PacketManager->GetModifableCommand( )->m_flSideMove = 450.0f;
		else if ( g_PacketManager->GetModifableCommand( )->m_flSideMove < -5.0f )
			g_PacketManager->GetModifableCommand( )->m_flSideMove = -450.0f;

		if ( g_PacketManager->GetModifableCommand( )->m_flForwardMove > 5.0f )
			g_PacketManager->GetModifableCommand( )->m_flForwardMove = 450.0f;
		else if ( g_PacketManager->GetModifableCommand( )->m_flForwardMove < -5.0f )
			g_PacketManager->GetModifableCommand( )->m_flForwardMove = -450.0f;
	}
	
	g_AutoPeek->Instance( );
	g_PredictionSystem->Instance( );

	g_PacketManager->GetModifablePacket( ) = false;
	if ( m_Data.m_IsFinalTick )
		g_PacketManager->GetModifablePacket( ) = true;

	if ( g_PacketManager->GetModifablePacket( ) )
		g_PacketManager->PushCommand( g_PacketManager->GetModifableCommand( )->m_nCommand );
	
	if ( g_Settings->m_bAntiUntrusted || ( *g_Globals.m_Interfaces.m_GameRules )->IsValveDS( ) )
	{
		Math::Normalize3( g_PacketManager->GetModifableCommand( )->m_angViewAngles );
		Math::ClampAngles( g_PacketManager->GetModifableCommand( )->m_angViewAngles );
	}
	
	Math::FixMovement( g_PacketManager->GetModifableCommand( ) );
	return false;
}

void C_ExploitSystem::PerformPackets( )
{
	if ( !m_Data.m_ShiftAmount || m_Data.m_ShiftMode != MODE::SHIFT_MOVE )
		return;

	g_Globals.m_Interfaces.m_Prediction->ForceRepredict( );
	g_Globals.m_Interfaces.m_Prediction->m_bPreviousAckHadErrors( ) = true;
	for ( int32_t iShiftTime = 0; iShiftTime < m_Data.m_ShiftAmount; iShiftTime++ )
	{
		m_Data.m_RemainToShift = m_Data.m_ShiftAmount - iShiftTime;
		m_Data.m_IsFinalTick = m_Data.m_RemainToShift == 1;
		m_Data.m_ShiftingTickbase = true;

		g_Globals.m_Hooks.m_Originals.m_CL_Move( 0.0f, m_Data.m_IsFinalTick );
	}

	m_Data.m_ShiftingTickbase = false;
	m_Data.m_TicksAllowedForProcessing = 0;
	m_Data.m_ShiftTick = TIME_TO_TICKS( g_Globals.m_Interfaces.m_GlobalVars->m_flRealTime + g_Settings->m_flRechargeTime );
	m_Data.m_ShiftAmount = 0;
	m_Data.m_NextShift = 0;
	m_Data.m_IsFinalTick = false;
}

void C_ExploitSystem::ShiftTickbase( int nAmount )
{
	m_Data.m_ShiftAmount = nAmount;
	m_Data.m_ShiftedTickbase = nAmount;
	m_Data.m_ShiftMode = MODE::SHIFT_BUFFER;
	m_Data.m_ShiftCommand = g_PacketManager->GetModifableCommand( )->m_nCommand;
}

bool C_ExploitSystem::IsAllowedToRun( )
{
	if ( !g_Globals.m_Interfaces.m_EngineClient->IsInGame( ) || !g_Globals.m_Interfaces.m_EngineClient->IsConnected( ) )
		return true;

	if ( !g_Globals.m_LocalPlayer || !g_Globals.m_LocalPlayer->IsAlive( ) || !m_Data.m_Selected )
		return true;

	if ( g_Globals.m_Packet.m_bFakeDuck )
	{
		m_Data.m_ShiftTick = TIME_TO_TICKS( g_Globals.m_Interfaces.m_GlobalVars->m_flRealTime + g_Settings->m_flRechargeTime );
		return true;
	}

	if ( m_Data.m_ShiftTick )
	{
		if ( TIME_TO_TICKS( g_Globals.m_Interfaces.m_GlobalVars->m_flRealTime ) <= m_Data.m_ShiftTick )
			return true;
	}

	m_Data.m_ShiftTick = 0;
	if ( m_Data.m_TicksAllowedForProcessing > 14 )
		return true;
	else
		g_Globals.m_Interfaces.m_GlobalVars->m_flInterpolationAmount = 0.0f;

	m_Data.m_TicksAllowedForProcessing++;
	return false;
}