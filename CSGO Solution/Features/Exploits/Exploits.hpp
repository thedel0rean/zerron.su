#pragma once
#include "../SDK/Includes.hpp"

enum EXPLOIT : int
{
	HIDESHOTS = 1,
	LAGPEEK,
	DOUBLETAP
};

enum MODE : int
{
	SHIFT_BUFFER,
	SHIFT_MOVE
};

class C_ExploitSystem
{
public:
	virtual void Instance( );
	virtual void BreakLagCompensation( );
	virtual void SetupCommand( );
	virtual bool IsAllowedToRun( );
	virtual bool IsFinalTick( );
	virtual bool PerformCommand( );
	virtual void PerformPackets( );
	virtual void ShiftTickbase( int nAmount );
	virtual int32_t GetNetworkTickbase( int32_t nCommand );
	virtual int32_t GetShiftAmount( ) { return this->m_Data.m_NextShift; };
	virtual void SetShiftAmount( int nShift ) { this->m_Data.m_NextShift = nShift; };
	virtual int32_t GetForcedShiftAmount( ) { return this->m_Data.m_ShiftAmount; };
	virtual int32_t GetShiftMode( ) { return this->m_Data.m_ShiftMode; };
	virtual int32_t GetShiftCommand( ) { return this->m_Data.m_ShiftCommand; };
	virtual int32_t GetActiveExploit( ) { return this->m_Data.m_Selected; };
	virtual bool IsShiftingTickbase( ) { return this->m_Data.m_ShiftingTickbase; };
	virtual int32_t GetChargeCommand( ) { return this->m_Data.m_ChargeCommand; };

	virtual void ResetShiftAmount( ) { this->m_Data.m_ShiftAmount = 0; };
	struct
	{
		int m_ShiftedTickbase = 0;
		int m_ShiftAmount = 0;
		int m_ChargeAmount = 0;
		int m_ShiftCommand = 0;
		int m_ChargeCommand = 0;
		int m_ShiftMode = 0;
		int m_NextShift = 0;
		int m_LastShift = 0;
		int m_RemainToShift = 0;
		int m_Selected = 0;
		int m_TicksToStop = 0;
		int m_TicksAllowedForProcessing = 0;
		int m_ShiftTick = 0;
		int m_LastTick = 0;

		bool m_Once = false;
		bool m_Reset = false;
		bool m_PreviousPeek = false;
		bool m_ShiftingTickbase = false;
		bool m_IsFinalTick = false;
		bool m_CanSkipInterpolation = false;
	} m_Data;
private:
	std::array < int, MULTIPLAYER_BACKUP > m_PredictedTickbase;

	C_MoveData m_MoveData = C_MoveData( );
};

inline C_ExploitSystem* g_ExploitSystem = new C_ExploitSystem( );